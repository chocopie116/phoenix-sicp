(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp) 
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((and? exp) (eval-and (and-operands exp) env))
        ((or? exp) (eval-or (or-operands exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))

;and
(define (and? exp)
    (tagged-list? exp 'and))
(define (and-operands exp) (cdr exp))
(define (no-and-operands? ops) (null? ops))
(define (first-and-operand ops) (car ops))
(define (rest-and-operands ops) (cdr ops))
(define (eval-and ops env)
    (cond ((no-and-operands? ops) #t)
          ((false? (eval (first-and-operand ops) env)) false)
          (else (eval-and (rest-and-operands ops) env))))

;or
(define (or? exp)
    (tagged-list? exp 'or))
(define (or-operands exp) (cdr exp))
(define (no-or-operands? ops) (null? ops))
(define (first-or-operand ops) (car ops))
(define (rest-or-operands ops) (cdr ops))
(define (eval-or ops env)
    (cond ((no-or-operands? ops) false)
          ((true? (eval (first-or-operand ops) env)) #t)
          (else (eval-or (rest-or-operands ops) env))))

;As derived expressions
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp) 
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((and? exp) (eval (and->if exp) env))
        ((or? exp) (eval (or->if exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))


;and
(define (and->if exp)
    (expand-and-operands (and-operands exp)))
(define (expand-and-clauses ops)
    (if (no-and-operands? ops)
        true
        (make-if (first-and-operand ops)
                 (expand-and-clauses (rest-and-operands ops))
                 false)))

(define (or->if exp)
    (expand-or-operands (or-operands exp)))
(define (expand-or-clauses ops)
    (if (no-or-operands? ops)
        false
        (make-if (first-or-operand ops)
                 true
                 (expand-or-clauses (rest-or-operands ops)))))
