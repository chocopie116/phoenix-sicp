(define (row-pos q) (car q))
(define (col-pos q) (cadr q))

(define (horizontal-safe? q queens)
    (cond ((null? queens) #t)
          ((= (row-pos q) (row-pos (car queens))) false)
          (else (horizontal-safe? q (cdr queens)))))

(define (vertical-safe? q queens)
    (cond ((null? queens) #t)
          ((= (col-pos q) (col-pos (car queens))) false)
          (else (vertical-safe? q (cdr queens)))))

(define (diagonal-safe? q queens)
    (cond ((null? queens) 
            #t)
          ((= (abs (- (row-pos q) (row-pos (car queens))))
              (abs (- (col-pos q) (col-pos (car queens))))) 
            false)
          (else
            (diagonal-safe? q (cdr queens)))))

(define (chess-puzzle)
    (let ((q1 (list (amb 1 2 3 4) (amb 1 2 3 4)))
          (q2 (list (amb 1 2 3 4) (amb 1 2 3 4))))
        (require (horizontal-safe? q1 (list q2)))
        (require (vertical-safe? q1 (list q2)))
        (require (diagonal-safe? q1 (list q2)))
        (let ((q3 (list (amb 1 2 3 4) (amb 1 2 3 4))))
            (require (horizontal-safe? q3 (list q1 q2)))
            (require (vertical-safe? q3 (list q1 q2)))
            (require (diagonal-safe? q3 (list q1 q2)))
            (let ((q4 (list (amb 1 2 3 4) (amb 1 2 3 4))))
                (require (horizontal-safe? q4 (list q1 q2 q3)))
                (require (vertical-safe? q4 (list q1 q2 q3)))
                (require (diagonal-safe? q4 (list q1 q2 q3)))
                (list q1 q2 q3 q4)))))

;One answer:
;((1 2) (2 4) (3 1) (4 3))
