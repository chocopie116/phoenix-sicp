(define (distinct? elems)
    (define (in? elem elems)
        (cond ((null? elems) false)
              ((eq? elem (car elems)) #t)
              (else (in? elem (cdr elems)))))
    (define (distinct-loop elems)
        (cond ((null? elems) #t)
              ((in? (car elems) (cdr elems)) false)
              (else (distinct-loop (cdr elems)))))
    (distinct-loop elems))

;the female-named variables in the let expressions are pairs, the car being the owner, the cdr the father.
(define (yacht-puzzle)
    (define (owner-of yacht) (car yacht))
    (define (father-of daughter) (cadr daughter))
    (define (daughter-of father daughters)
        (cond ((null? daughters) '())
              ((eq? (father-of (car daughters)) father) (car daughters))
              (else (daughter-of father (cdr daughters)))))

    (let ((father-owners '(Moore Downing Hall Barnacle Parker)))
        (let ((gabrielle (list (an-element-of father-owners) (an-element-of father-owners)))
              (lorna (list (an-element-of father-owners) (an-element-of father-owners)))
              (rosalind (list (an-element-of father-owners) (an-element-of father-owners)))
              (melissa (list (an-element-of father-owners) (an-element-of father-owners)))
              (maryann (list (an-element-of father-owners) (an-element-of father-owners))))

            (require (distinct? (map owner-of (list gabrielle lorna rosalind melissa maryann))))
            (require (distinct? (map father-of (list gabrielle lorna rosalind melissa maryann))))
            (require (distinct? gabrielle))
            (require (distinct? lorna))
            (require (distinct? rosalind))
            (require (distinct? melissa))
            (require (distinct? maryann))

            (require (eq? (owner-of melissa) 'Downing))
            (require (eq? (owner-of lorna) 'Moore))
            (require (eq? (owner-of gabrielle) 'Barnacle))
            (require (eq? (owner-of rosalind) 'Hall))
            (require (eq? (father-of maryann) 'Moore))
            (require (eq? (father-of melissa) 'Barnacle))
            (require (eq? (father-of Gabrielle) 
                          (owner-of (daughter-of 'Parker (list gabrielle lorna rosalind melissa maryann)))))
            (list 'father-of-lorna (father-of lorna)))))

;Efficient version
(define (yacht-puzzle)
    (define (owner-of yacht) (car yacht))
    (define (father-of daughter) (cadr daughter))
    (define (daughter-of father daughters)
        (cond ((null? daughters) '())
              ((eq? (father-of (car daughters)) father) (car daughters))
              (else (daughter-of father (cdr daughters)))))

    (let ((melissa (list 'Downing 'Barnacle)))
        (let ((maryann (list 'Parker 'Moore)))
            (let ((lorna (list 'Moore (amb 'Downing 'Hall 'Parker))))
                (let ((rosalind (list 'Hall (amb 'Downing 'Hall 'Parker))))
                    (require (not (eq? (father-of rosalind) (father-of lorna))))
                    (let ((gabrielle (list 'Barnacle (amb 'Downing 'Hall 'Parker))))
                        (require (not (or (eq? (father-of gabrielle) (father-of rosalind))
                                          (eq? (father-of gabrielle) (father-of lorna)))))
                        (require (eq? (father-of gabrielle) 
                          (owner-of (daughter-of 'Parker (list gabrielle lorna rosalind melissa maryann)))))
                        (list 'father-of-lorna (father-of lorna))))))))

;Output:
;(father-of-lorna downing)

;There would have been 2 solutions if the mentioned restrictioned was absent.
